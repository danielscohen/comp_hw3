%{
	#include <iostream>
	#include "yystype.h"
	#include "parser_utils.h"
	#include "hw3_output.hpp"
	#include <string>
	// #define YYDEBUG 1
	// #define YYERROR_VERBOSE 1

    using namespace std;
	using namespace output;

    int yylex();
	extern int yylineno;
    void yyerror(char const*);

%}
////////////TODO ASK DANIAL///////////////

/* %union{
	int val;
	string text;
}; */
%nonassoc VOID INT BYTE B BOOL TRUE FALSE
 	   RETURN WHILE BREAK CONTINUE SWITCH DEFAULT COLON SC 
       COMMA LBRACE RBRACE IF CASE HELSE NUM ID STRING
%nonassoc ELSE
%right ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELOP
%left ADD SUB
%left MULT DIV
%right NOT
%left LPAREN RPAREN

%%

Program : Funcs 												        {printProductionRule(1);}
;

Funcs :	/*epsilon*/													        {printProductionRule(2);}
	  | FuncDecl Funcs 														{printProductionRule(3);}
;

FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE {addFunDef($1->name, $2->name, $4->pNames, $4->pTypes);} Statements RBRACE 		{exitScopeActions();}
;

RetType : Type 																{$$ = $1;}
		| VOID 																{$$ = new Type("void");}
;

Formals : /*epsilon*/														{$$ = new Type("");}
		| FormalsList 														{$$ = $1;}
;

FormalsList : FormalDecl 													{$$ = $1;}
			| FormalDecl COMMA FormalsList 									{$$ = $3; $$->pNames.push_back($1->pNames[0]); $$->pTypes.push_back($1->pTypes[0]);}
;

FormalDecl : Type ID 														{$$ = new Formals($2->name, $1->name);}
;

Statements : Statment 														{printProductionRule(12);}
		   | Statements Statment 											{printProductionRule(13);}
;

Statment : LBRACE {enterScopeSetup();} Statements RBRACE 		{exitScopeActions();}
		 | Type ID SC 														{prevDefCheck($2->name); addVarToSymTable($1->name, $2->name);}
		 | Type ID ASSIGN Exp SC 											{printProductionRule(16);}
		 | ID ASSIGN Exp SC 												{printProductionRule(17);}
		 | Call SC 															{printProductionRule(18);}
		 | RETURN SC 														{printProductionRule(19);}
		 | RETURN Exp SC 													{printProductionRule(20);}
		 | IF LPAREN Exp RPAREN Statment %prec HELSE 									{printProductionRule(21);}
		 | IF LPAREN Exp RPAREN Statment ELSE Statment  						{printProductionRule(22);}
		 | WHILE LPAREN Exp RPAREN Statment 								{printProductionRule(23);}
		 | BREAK SC 														{printProductionRule(24);}
		 | CONTINUE SC 														{printProductionRule(25);}
		 | SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE                  {printProductionRule(26);}
;

Call : ID LPAREN ExpList RPAREN 											{printProductionRule(27);}
	 | ID LPAREN RPAREN 													{printProductionRule(28);}
;

ExpList : Exp 																{printProductionRule(29);}
		| Exp COMMA ExpList 												{printProductionRule(30);}
;

Type : INT 																	{$$ = new Type("int");}
	 | BYTE 																{$$ = new Type("byte");}
     | BOOL 																{$$ = new Type("bool");}
;


Exp : LPAREN Exp RPAREN 													{$$ = $2;}
    | Exp ADD Exp 														{$$ = doBinop($1, $3, "+");}
    | Exp SUB Exp 														{$$ = doBinop($1, $3, "-");}
    | Exp MULT Exp 														{$$ = doBinop($1, $3, "*");}
    | Exp DIV Exp 														{$$ = doBinop($1, $3, "/");}
	| ID 																	{printProductionRule(36);}
	| Call 																	{printProductionRule(37);}
	| NUM 																	{$$ = $1;}
	| NUM B 																{$$ = $1; $$->type = "byte";}
	| STRING 																{$$ = $1;}
	| TRUE 																	{$$ = $1;}
	| FALSE 																{$$ = $1;}
	| NOT Exp 																{$2->boolVal = checkNot($2); $$ = $2;}
	| Exp AND Exp 															{printProductionRule(44);}
	| Exp OR Exp 															{printProductionRule(45);}
	| Exp RELOP Exp 												    	{printProductionRule(46);}
	| Exp EQUALITY Exp 												    	{printProductionRule(46);}
;

CaseList : CaseDecl CaseList	                                            {printProductionRule(48);}
		 | CaseDecl	                                                        {printProductionRule(49);}
		 | DEFAULT COLON Statements	                                        {printProductionRule(50);}

CaseDecl : CASE NUM COLON Statements	                                    {printProductionRule(51);}



%%


////////////TODO ASK DANIAL///////////////

int main()
{
	/* yydebug = 1; */
	enterScopeSetup();
	int parseRes = yyparse();
	exitScopeActions();
    return parseRes;
}

void yyerror(char const* s){
	errorSyn(yylineno);
	exit(0);
}
